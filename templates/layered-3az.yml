---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Generated Template"
Parameters:
  cidrBlockVpc:
    Default: "10.0.0.0/19"
    Type: String
    Description: "Enter a valid /19 cidr block."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/19'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlockVpc
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
  NoInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NoInternetRouteTable"
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetA"
        - Key: "Layer"
          Value: "public"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PublicRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  NATA:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPA.AllocationId}"
      SubnetId:
        Ref: PublicSubnetA
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATA"
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetB"
        - Key: "Layer"
          Value: "public"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PublicRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable
  NATB:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPB.AllocationId}"
      SubnetId:
        Ref: PublicSubnetB
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATB"
  EIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetC"
        - Key: "Layer"
          Value: "public"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PublicRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicRouteTable
  NATC:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPC.AllocationId}"
      SubnetId:
        Ref: PublicSubnetC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATC"
  EIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateSubnetA"
        - Key: "Layer"
          Value: "private"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PrivateRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTableA
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRouteTableA"
        - Key: "Layer"
          Value: "private"
  PrivateNATARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateSubnetB"
        - Key: "Layer"
          Value: "private"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PrivateRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTableB
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRouteTableB"
        - Key: "Layer"
          Value: "private"
  PrivateNATBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateSubnetC"
        - Key: "Layer"
          Value: "private"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PrivateRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC
      RouteTableId:
        Ref: PrivateRouteTableC
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRouteTableC"
        - Key: "Layer"
          Value: "private"
  PrivateNATCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATC
  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DataSubnetA"
        - Key: "Layer"
          Value: "data"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  DataRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetA
      RouteTableId:
        Ref: NoInternetRouteTable
  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DataSubnetB"
        - Key: "Layer"
          Value: "data"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  DataRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetB
      RouteTableId:
        Ref: NoInternetRouteTable
  DataSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DataSubnetC"
        - Key: "Layer"
          Value: "data"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  DataRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetC
      RouteTableId:
        Ref: NoInternetRouteTable
Outputs:
  PublicSubnetIDs:
    Description: A list of publicSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "PublicSubnetA"
        - !Ref "PublicSubnetB"
        - !Ref "PublicSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-publicSubnetIDs"
  PrivateSubnetIDs:
    Description: A list of privateSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "PrivateSubnetA"
        - !Ref "PrivateSubnetB"
        - !Ref "PrivateSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-privateSubnetIDs"
  DataSubnetIDs:
    Description: A list of dataSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "DataSubnetA"
        - !Ref "DataSubnetB"
        - !Ref "DataSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-dataSubnetIDs"
