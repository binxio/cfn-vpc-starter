
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Generated Template for a VPC"
Parameters:
  cidrBlockVpc:
    Default: "10.0.0.0/19"
    Type: String
    Description: "Enter a valid /19 cidr block."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/19'
  yourHomeIPRange:
    Default: "0.0.0.0/0"
    Type: String
    Description: "Enter a valid cidr block to allow traffic to SSH."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlockVpc
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
  NoInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NoInternetRouteTable"
  BlockInboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  BlockOutboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Private"
  InboundPrivateNetworkAclEntryLocal:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  InboundPrivateNetworkAclEntryReturnTraffic:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  OutboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 11
            - 8
            - 8
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateSubnetA"
        - Key: "Layer"
          Value: "private"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 11
  PrivateSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      NetworkAclId:
        Ref: PrivateNetworkAcl
  PrivateRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTableA
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateRouteTableA"
        - Key: "Layer"
          Value: "private"
Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PrivateSubnetIDs:
    Description: A list of privateSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "PrivateSubnetA"
    Export:
      Name: !Sub "${AWS::StackName}-privateSubnetIDs"
