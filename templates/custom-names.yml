
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Generated Template for a VPC"
Parameters:
  cidrBlockVpc:
    Default: "10.0.0.0/20"
    Type: String
    Description: "Enter a valid /20 cidr block."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/20'
  yourHomeIPRange:
    Default: "0.0.0.0/0"
    Type: String
    Description: "Enter a valid cidr block to allow traffic to SSH."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlockVpc
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  DmzRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DmzRouteTable"
  DmzRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: DmzRouteTable
  NoInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NoInternetRouteTable"
  BlockInboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  BlockOutboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  DmzNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Dmz"
  InboundDmzNetworkAclEntryHTTP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 100
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 80
  InboundDmzNetworkAclEntryHTTPS:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 110
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 443
        To: 443
  InboundDmzNetworkAclEntrySSH:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 120
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref yourHomeIPRange
      PortRange:
        From: 22
        To: 22
  InboundDmzNetworkAclEntryRDP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 130
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref yourHomeIPRange
      PortRange:
        From: 3389
        To: 3389
  InboundDmzNetworkAclEntryHighPorts:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 140
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535
  OutboundDmzNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "DmzNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  DmzSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DmzSubnetA"
        - Key: "Layer"
          Value: "dmz"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DmzSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetA
      NetworkAclId:
        Ref: DmzNetworkAcl
  DmzRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetA
      RouteTableId:
        Ref: DmzRouteTable
  NATA:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPA.AllocationId}"
      SubnetId:
        Ref: DmzSubnetA
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATA"
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  DmzSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DmzSubnetB"
        - Key: "Layer"
          Value: "dmz"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DmzSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetB
      NetworkAclId:
        Ref: DmzNetworkAcl
  DmzRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetB
      RouteTableId:
        Ref: DmzRouteTable
  NATB:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPB.AllocationId}"
      SubnetId:
        Ref: DmzSubnetB
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATB"
  EIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  DmzSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 0
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DmzSubnetC"
        - Key: "Layer"
          Value: "dmz"
        - Key: "LayerCidr"
          Value:
            !Select
            - 0
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DmzSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetC
      NetworkAclId:
        Ref: DmzNetworkAcl
  DmzRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DmzSubnetC
      RouteTableId:
        Ref: DmzRouteTable
  NATC:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIPC.AllocationId}"
      SubnetId:
        Ref: DmzSubnetC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NATC"
  EIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AppNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-App"
  InboundAppNetworkAclEntryLocal:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "AppNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  InboundAppNetworkAclEntryReturnTraffic:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "AppNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  OutboundAppNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "AppNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  AppSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppSubnetA"
        - Key: "Layer"
          Value: "app"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  AppSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetA
      NetworkAclId:
        Ref: AppNetworkAcl
  AppRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetA
      RouteTableId:
        Ref: AppRouteTableA
  AppRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppRouteTableA"
        - Key: "Layer"
          Value: "app"
  AppNATARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AppRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATA
  AppSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppSubnetB"
        - Key: "Layer"
          Value: "app"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  AppSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetB
      NetworkAclId:
        Ref: AppNetworkAcl
  AppRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetB
      RouteTableId:
        Ref: AppRouteTableB
  AppRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppRouteTableB"
        - Key: "Layer"
          Value: "app"
  AppNATBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AppRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATB
  AppSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 1
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppSubnetC"
        - Key: "Layer"
          Value: "app"
        - Key: "LayerCidr"
          Value:
            !Select
            - 1
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  AppSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetC
      NetworkAclId:
        Ref: AppNetworkAcl
  AppRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetC
      RouteTableId:
        Ref: AppRouteTableC
  AppRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-AppRouteTableC"
        - Key: "Layer"
          Value: "app"
  AppNATCRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AppRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATC
  DbNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Db"
  InboundDbNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DbNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  OutboundDbNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "DbNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  DbSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock:
        !Select
        - 0
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DbSubnetA"
        - Key: "Layer"
          Value: "db"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DbSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetA
      NetworkAclId:
        Ref: DbNetworkAcl
  DbRouteTableAAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetA
      RouteTableId:
        Ref: NoInternetRouteTable
  DbSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "b"]]
      CidrBlock:
        !Select
        - 1
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DbSubnetB"
        - Key: "Layer"
          Value: "db"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DbSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetB
      NetworkAclId:
        Ref: DbNetworkAcl
  DbRouteTableBAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetB
      RouteTableId:
        Ref: NoInternetRouteTable
  DbSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "c"]]
      CidrBlock:
        !Select
        - 2
        - 'Fn::Cidr':
            - !Select
              - 2
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - 4
                  - 10
            - 8
            - 7
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-DbSubnetC"
        - Key: "Layer"
          Value: "db"
        - Key: "LayerCidr"
          Value:
            !Select
            - 2
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - 4
                - 10
  DbSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetC
      NetworkAclId:
        Ref: DbNetworkAcl
  DbRouteTableCAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DbSubnetC
      RouteTableId:
        Ref: NoInternetRouteTable
Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  DmzSubnetIDs:
    Description: A list of dmzSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "DmzSubnetA"
        - !Ref "DmzSubnetB"
        - !Ref "DmzSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-dmzSubnetIDs"
  AppSubnetIDs:
    Description: A list of appSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "AppSubnetA"
        - !Ref "AppSubnetB"
        - !Ref "AppSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-appSubnetIDs"
  DbSubnetIDs:
    Description: A list of dbSubnetsIDs
    Value:
      !Join
      - ', '
      - - !Ref "DbSubnetA"
        - !Ref "DbSubnetB"
        - !Ref "DbSubnetC"
    Export:
      Name: !Sub "${AWS::StackName}-dbSubnetIDs"
