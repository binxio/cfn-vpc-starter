{%- set vpc_cidr_block = vpc_cidr_block|default('10.0.0.0/20') %}
{%- set layers = layers | default(['public', 'private', 'data']) %}
{%- set azs = azs | default(['a', 'b', 'c']) %}
{%- set vpc_netmask = vpc_cidr_block.split('/')[1] | int %}
{%- set layer_netmask = layer_netmask | default(vpc_netmask + 2) %}
{%- set subnet_netmask = subnet_netmask | default(layer_netmask + 3) %}
{%- set layers_max = 2**(layer_netmask-vpc_netmask) %}
{%- set layer_size_mask = 32-layer_netmask %}
{%- set azs_max = 2**(subnet_netmask-layer_netmask) %}
{%- set subnet_size_mask = 32-subnet_netmask %}
{%- set public = public | default('public') %}
{%- set private = private | default('private') %}
{%- set data = data | default('data') %}
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Generated Template for a VPC"
Parameters:
  cidrBlockVpc:
    Default: "{{ vpc_cidr_block }}"
    Type: String
    Description: "Enter a valid /{{ vpc_netmask }} cidr block."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/{{ vpc_netmask }}'
  yourHomeIPRange:
    Default: "0.0.0.0/0"
    Type: String
    Description: "Enter a valid cidr block to allow traffic to SSH."
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
Resources:
{#- VPC Level Resources #}
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlockVpc
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  {{ public|title }}RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-{{ public|title }}RouteTable"
  {{ public|title }}Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: {{ public|title }}RouteTable
  NoInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NoInternetRouteTable"
  BlockInboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  BlockOutboundDefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: "deny"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
{%- for layer in layers %}
  {{ layer|title }}NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-{{ layer|title }}"
{%- if layer == public %}
  Inbound{{ layer|title }}NetworkAclEntryHTTP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 80
  Inbound{{ layer|title }}NetworkAclEntryHTTPS:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 110
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 443
        To: 443
  Inbound{{ layer|title }}NetworkAclEntrySSH:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 120
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref yourHomeIPRange
      PortRange:
        From: 22
        To: 22
  Inbound{{ layer|title }}NetworkAclEntryRDP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 130
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref yourHomeIPRange
      PortRange:
        From: 3389
        To: 3389
  Inbound{{ layer|title }}NetworkAclEntryHighPorts:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 140
      Protocol: 6
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535
  Outbound{{ layer|title }}NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
{%- endif %}{#if layer == public#}
{%- if layer == private %}
  Inbound{{ layer|title }}NetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  Outbound{{ layer|title }}NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
{%- endif %}{#if layer == private #}
{%- if layer == data %}
  Inbound{{ layer|title }}NetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
  Outbound{{ layer|title }}NetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "{{ layer|title }}NetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: !Ref cidrBlockVpc
      PortRange:
        From: 0
        To: 65535
{%- endif %}{#if layer == data #}
{%- set layer_key = loop.index0 %}
{%- for az in azs %}
  {{ layer|title }}Subnet{{ az|upper }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "{{ az }}"]]
      CidrBlock:
        !Select
        - {{ loop.index0 }}
        - 'Fn::Cidr':
            - !Select
              - {{ layer_key }}
              - 'Fn::Cidr':
                  - !Ref "cidrBlockVpc"
                  - {{ layers_max }}
                  - {{ layer_size_mask }}
            - {{ azs_max }}
            - {{ subnet_size_mask }}
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-{{ layer|title }}Subnet{{ az|upper }}"
        - Key: "Layer"
          Value: "{{ layer }}"
        - Key: "LayerCidr"
          Value:
            !Select
            - {{ layer_key }}
            - 'Fn::Cidr':
                - !Ref "cidrBlockVpc"
                - {{ layers_max }}
                - {{ layer_size_mask }}
  {{ layer|title }}Subnet{{ az|upper }}NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: {{ layer|title }}Subnet{{ az|upper }}
      NetworkAclId:
        Ref: {{ layer|title }}NetworkAcl
{%- if layer == public %}
  {{ layer|title }}RouteTable{{ az|upper }}Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: {{ layer|title }}Subnet{{ az|upper }}
      RouteTableId:
        Ref: {{ layer|title }}RouteTable
{%- if private in layers %}{#deploy only if private layers are present#}
  NAT{{ az|upper }}:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub "${EIP{{ az|upper }}.AllocationId}"
      SubnetId:
        Ref: {{ layer|title }}Subnet{{ az|upper }}
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-NAT{{ az|upper }}"
  EIP{{ az|upper }}:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
{%- endif %}{#if private in layers#}
{%- endif %}{#if layer == public#}
{%- if layer == private %}
  {{ layer|title }}RouteTable{{ az|upper }}Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: {{ layer|title }}Subnet{{ az|upper }}
      RouteTableId:
        Ref: {{ layer|title }}RouteTable{{ az|upper }}
  {{ layer|title }}RouteTable{{ az|upper }}:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-{{ layer|title }}RouteTable{{ az|upper }}"
        - Key: "Layer"
          Value: "{{ layer }}"
{%- if public in layers %}{#deploy only if public layers are present#}
  {{ layer|title }}NAT{{ az|upper }}Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: {{ layer|title }}RouteTable{{ az|upper }}
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT{{ az|upper }}
{%- endif %}{#if public in layers#}
{%- endif %}{#if layer == private#}
{%- if layer == data %}
  {{ layer|title }}RouteTable{{ az|upper }}Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: {{ layer|title }}Subnet{{ az|upper }}
      RouteTableId:
        Ref: NoInternetRouteTable
{%- endif %}{#if layer == data#}
{%- endfor %}{#end of azs loop#}
{%- endfor %}{#end of layers loop#}
Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
{%- for layer in layers %}
  {{ layer|title }}SubnetIDs:
    Description: A list of {{ layer }}SubnetsIDs
    Value:
      !Join
      - ', '
{%- for az in azs %}
{%- if loop.first %}
      - - !Ref "{{ layer|title }}Subnet{{ az|upper }}"
{%- else %}
        - !Ref "{{ layer|title }}Subnet{{ az|upper }}"
{%- endif %}
{%- endfor %}{#end of azs#}
    Export:
      Name: !Sub "${AWS::StackName}-{{ layer }}SubnetIDs"
{%- endfor %}{#end of layers#}
